# -*- coding: utf-8 -*-
"""Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mflLz28Jea56CdPttJb0Vlil88dr5FKH

1. 63114540151 นายพงศกร คำมุงคุล (dash framework & deploy)
2. 63114540210 นายวันเจริญ อุปมัย (Regression & dash framework)
3. 63114540283 นางสาวสุนิตา บุญจริง (Plot graph & deploy)
4. 63114540554 นายฉัตรชัย แก้วฉุย (data preparation)

# Medical Cost Personal Datasets
### Introduction and Objective

> to accurately predict medical costs based on data age, sex (male and female), bmi, children (number of children), smoker (yes or not), region (in the US, northeast, southeast, southwest, northwest). We'll also look into key factors in the data which factors affect healthcare rates the most. and the least To help people care and watch and their own health. to reduce the burden of each medical expense


### Datasets

> Medical Cost Personal Datasets together with Kaggle

> age: age of primary beneficiary

> sex: insurance contractor gender, female, male

> bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height, objective index of body weight (kg / m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9

> children: Number of children covered by health insurance / Number of dependents

> smoker: Smoking

> region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.

> charges: Individual medical costs billed by health insurance

[Medical Cost Personal Datasets](https://www.kaggle.com/datasets/mirichoi0218/insurance)

[Medical Cost Personal Datasets Google drive](https://drive.google.com/drive/folders/15qF1rYOHTufJtAIFlSUoaSrvQGlWzGEl?usp=sharing)

###load data
"""

pip install matplotlib

pip install sklearn

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from pandas import DataFrame

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# %matplotlib inline

#from google.colab import files
#uploaded = files.upload()

"""###data preparation"""

df = pd.read_csv('/content/insurance.csv')
len(df)

df.head()

df.tail()

df.sample(5)

df.shape

df.isnull().sum()

def convert_sex(x):
  if x == 'male':
    return "0"
  elif x == 'female':
    return "1"

df['sex'] = df['sex'].apply(convert_sex) 
df

def convert_smoker(x): 
  if x == 'no':
    return "0"
  elif x == 'yes':
    return "1"

df['smoker'] = df['smoker'].apply(convert_smoker) 
df

def convert_region(x):
  if x == 'northeast': 
    return "0"
  elif x == 'southeast':
    return "1"
  elif x == 'southwest': 
    return "2"
  elif x == 'northwest': 
    return "3"

df['region'] = df['region'].apply(convert_region)
df

df['region'] = df['region'].astype(int) 
df['smoker'] = df['smoker'].astype(int)
df['sex'] = df['sex'].astype(int)
df.info()

df.describe()

df.head()

"""###Plot graph"""

plt.rcParams["figure.figsize"] = (12,8)

sns.histplot(df['age'], color="orange") 
plt.show()

sns.histplot(df['sex'], color="blue")
plt.show()

sns.histplot(df['bmi'], color="pink")
plt.show()

sns.histplot(df['children'], color="green")
plt.show()

sns.histplot(df['smoker'], color="yellow")
plt.show()

sns.histplot(df['region'], color="black")
plt.show()

sns.histplot(df['charges'], color="purple")
plt.show()

corr = df.corr()
sns.heatmap(corr, cmap = 'plasma', annot= True)

px.scatter(data_frame = df, x = 'bmi', y = 'charges', color = 'smoker', template = 'ggplot2')

"""###Train_Test_Split"""

X = df.drop(['charges'], axis = 1) 
y = df.charges

print('size of x = {0}'.format(X.size)) 
print('size of y = {0}'.format(y.size))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=34) #

print("X_train",len(X_train))
print("X_test",len(X_test))
print("y_train",len(y_train))
print("y_test",len(y_test))

"""###Linear Regression."""

Lin_reg = LinearRegression()
Lin_reg.fit(X_train, y_train)

print('Intercept = '+str(Lin_reg.intercept_))

print('Coefficient = '+str(Lin_reg.coef_))

accuracy = Lin_reg.score(X_test, y_test)
print('Accuracy = '+ str(accuracy))

y_pred = Lin_reg.predict(X_test)
print(y_pred)

plt.scatter(y_test, y_pred)
plt.show()

results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(results)

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'Mean absolute error: {mae:.2f}')
print(f'Mean squared error: {mse:.2f}')
print(f'Root mean squared error: {rmse:.2f}')